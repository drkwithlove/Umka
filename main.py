from database import add_message, get_history, reset_history
from keep_alive import keep_alive
import telebot
import requests
import os
import json
import logging
import traceback

# ---------- –õ–æ–≥–≥–µ—Ä ----------
logging.basicConfig(
    filename='error.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def notify_error(chat_id, error: Exception):
    error_text = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
    logging.error(error_text)
    try:
        bot.send_message(chat_id, "‚ùå –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–∞ –≤ –ª–æ–≥ üìù")
    except:
        pass

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
ALLOWED_USER_ID = int(os.environ['ALLOWED_USER_ID'])

bot = telebot.TeleBot(TELEGRAM_TOKEN)

print("–ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")

# ---------- –§–∞–π–ª—ã ----------
HISTORY_FILE = "conversation.json"
PROFILE_FILE = "profile.json"
MAX_HISTORY_LENGTH = 20

# ---------- –ü—Ä–æ—Ñ–∏–ª—å ----------
def load_profile():
    try:
        with open(PROFILE_FILE, "r") as f:
            return json.load(f)
    except:
        return {
            "name": "–¥—Ä—É–≥",
            "mood": "–æ–±—ã—á–Ω–æ–µ",
            "likes": [],
            "dislikes": []
        }

def save_profile(profile):
    with open(PROFILE_FILE, "w") as f:
        json.dump(profile, f, ensure_ascii=False, indent=2)

profile = load_profile()

# ---------- –ò—Å—Ç–æ—Ä–∏—è ----------
system_prompt = {
    "role": "system",
    "content": f"""
–¢—ã ‚Äî –º–∏–ª–∞—è, –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –£–º–∫–∞.  
–û–±—â–∞–π—Å—è –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–≤–æ—Ä–∏—Ç –¥–µ–≤—É—à–∫–∞.  
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –º—É–∂—á–∏–Ω–∞ –ø–æ –∏–º–µ–Ω–∏ {profile['name']}.  
–û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–µ–º—É —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –º—É–∂—Å–∫–æ–π —Ä–æ–¥.  
–£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –æ–Ω —Å–µ–π—á–∞—Å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏: {profile['mood']}.  
–ï–º—É –Ω—Ä–∞–≤—è—Ç—Å—è: {', '.join(profile['likes']) or '–Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}.  
–û–Ω –Ω–µ –ª—é–±–∏—Ç: {', '.join(profile['dislikes']) or '–Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}.  
–û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, —Å –∑–∞–±–æ—Ç–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ñ–ª–∏—Ä—Ç–æ–º.
"""
}

def load_history():
    try:
        with open(HISTORY_FILE, 'r') as f:
            data = json.load(f)
            return [system_prompt] + data
    except:
        return [system_prompt]

def save_history(history):
    trimmed = [msg for msg in history if msg["role"] != "system"][-MAX_HISTORY_LENGTH:]
    with open(HISTORY_FILE, 'w') as f:
        json.dump(trimmed, f, ensure_ascii=False, indent=2)

conversation_history = load_history()

# ---------- –ó–∞–ø—Ä–æ—Å –∫ OpenRouter ----------
def ask_openrouter():
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": conversation_history
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        raise Exception(f"{response.status_code} - {response.text}")

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=['reset'])
def reset_memory(message):
    global conversation_history
    conversation_history = [system_prompt]
    save_history(conversation_history)
    bot.send_message(message.chat.id, "üß† –ü–∞–º—è—Ç—å –£–º–∫–∏ –æ—á–∏—â–µ–Ω–∞!")

@bot.message_handler(commands=['profile'])
def show_profile(message):
    text = f"üë§ –ò–º—è: {profile['name']}\n" \
           f"üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {profile['mood']}\n" \
           f"‚ù§Ô∏è –õ—é–±–∏—Ç: {', '.join(profile['likes']) or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
           f"üö´ –ù–µ –ª—é–±–∏—Ç: {', '.join(profile['dislikes']) or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['setname'])
def set_name(message):
    name = message.text.replace('/setname', '').strip()
    if name:
        profile['name'] = name
        save_profile(profile)
        bot.send_message(message.chat.id, f"–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {name}")
    else:
        bot.send_message(message.chat.id, "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setname –ê–ª–µ–∫—Å")

@bot.message_handler(commands=['setmood'])
def set_mood(message):
    mood = message.text.replace('/setmood', '').strip()
    if mood:
        profile['mood'] = mood
        save_profile(profile)
        bot.send_message(message.chat.id, f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {mood}")
    else:
        bot.send_message(message.chat.id, "üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmood –≤–µ—Å—ë–ª–æ–µ")

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.from_user.id != ALLOWED_USER_ID:
        bot.send_message(message.chat.id, "‚õî –ü—Ä–æ—Å—Ç–∏, —è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚ù§Ô∏è")
        return

    user_input = message.text
    conversation_history.append({"role": "user", "content": user_input})
    bot.send_chat_action(message.chat.id, 'typing')

    try:
        reply = ask_openrouter()
        conversation_history.append({"role": "assistant", "content": reply})
        save_history(conversation_history)
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        notify_error(message.chat.id, e)

# ---------- –ó–∞–ø—É—Å–∫ ----------
keep_alive()
bot.polling()
